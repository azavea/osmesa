{"paragraphs":[{"text":"import osmesa.analytics._\n\nimport com.amazonaws.services.s3.model.CannedAccessControlList._\nimport com.monovore.decline._\nimport com.vividsolutions.jts.{geom => jts}\nimport geotrellis.proj4._\nimport geotrellis.spark._\nimport geotrellis.spark.tiling._\nimport geotrellis.spark.io.s3._\nimport geotrellis.util._\nimport geotrellis.vector._\nimport geotrellis.vectortile._\nimport org.apache.spark._\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.functions._\nimport vectorpipe._\n\n","user":"anonymous","dateUpdated":"2017-10-22T23:14:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport osmesa.analytics._\n\nimport com.amazonaws.services.s3.model.CannedAccessControlList._\n\nimport com.monovore.decline._\n\nimport com.vividsolutions.jts.{geom=>jts}\n\nimport geotrellis.proj4._\n\nimport geotrellis.spark._\n\nimport geotrellis.spark.tiling._\n\nimport geotrellis.spark.io.s3._\n\nimport geotrellis.util._\n\nimport geotrellis.vector._\n\nimport geotrellis.vectortile._\n\nimport org.apache.spark._\n\nimport org.apache.spark.rdd.RDD\n\nimport org.apache.spark.sql._\n\nimport org.apache.spark.sql.functions._\n\nimport vectorpipe._\n"}]},"apps":[],"jobName":"paragraph_1508693624315_-1212027676","id":"20171022-173344_2038491149","dateCreated":"2017-10-22T17:33:44+0000","dateStarted":"2017-10-22T23:14:57+0000","dateFinished":"2017-10-22T23:15:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4993"},{"text":"  val TARGET_HASHTAGS =\n    Set(\n      \"#missingmaps\",\n      \"#redcross\",\n      \"#eliminatemalaria\",\n      \"#tanzania\",\n      \"#mapgive\",\n      \"#peacecorps\",\n      \"#maproulette\",\n      \"#tanzaniadevelopmenttrust\"\n    )\n","user":"anonymous","dateUpdated":"2017-10-22T17:37:24+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nTARGET_HASHTAGS: scala.collection.immutable.Set[String] = Set(#peacecorps, #tanzania, #tanzaniadevelopmenttrust, #eliminatemalaria, #redcross, #missingmaps, #maproulette, #mapgive)\n"}]},"apps":[],"jobName":"paragraph_1508693796291_-1857607326","id":"20171022-173636_1603308198","dateCreated":"2017-10-22T17:36:36+0000","dateStarted":"2017-10-22T17:37:24+0000","dateFinished":"2017-10-22T17:37:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4994"},{"text":"//    implicit val ss = Analytics.sparkSession(\"Footprint By Campaign\")\n//    import ss.implicits._\n\n    val conf = new SparkConf()\n      .setIfMissing(\"spark.master\", \"local[*]\")\n      .setAppName(s\"OSMesa Analytics - temp\")\n      .set(\"spark.sql.orc.filterPushdown\", \"true\")\n      .set(\"spark.serializer\", \"org.apache.spark.serializer.KryoSerializer\")\n      .set(\"spark.kryo.registrator\", classOf[geotrellis.spark.io.kryo.KryoRegistrator].getName)\n\n    SparkSession.builder\n        .config(conf)\n        .enableHiveSupport\n        .getOrCreate","user":"anonymous","dateUpdated":"2017-10-22T23:15:31+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nconf: org.apache.spark.SparkConf = org.apache.spark.SparkConf@3f041924\n\nres5: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@1e078727\n"}]},"apps":[],"jobName":"paragraph_1508707136876_1293376057","id":"20171022-211856_1779835917","dateCreated":"2017-10-22T21:18:56+0000","dateStarted":"2017-10-22T23:15:31+0000","dateFinished":"2017-10-22T23:15:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4995"},{"text":"implicit val ss = res5","user":"anonymous","dateUpdated":"2017-10-22T23:15:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nss: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@1e078727\n"}]},"apps":[],"jobName":"paragraph_1508713761807_363168864","id":"20171022-230921_849567623","dateCreated":"2017-10-22T23:09:21+0000","dateStarted":"2017-10-22T23:15:36+0000","dateFinished":"2017-10-22T23:15:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4996"},{"text":"\n\n//    val outputPath = args(0)\n    //    val bufferSize = args(1).toDouble\n    val bufferSize = 0.001\n\n    val HashtagSet = raw\"#(\\w+)\".r\n    val breakOutHashtags =\n      udf[Seq[String], Map[String, String]] { tags =>\n        var hashtags = List[String]()\n        tags.get(\"comment\") match {\n          case Some(s) =>\n            for (m <- HashtagSet.findAllMatchIn(s)) { hashtags = hashtags :+ m.group(0).toLowerCase }\n          case None =>\n        }\n\n        hashtags\n      }\n\n    val partitioner = new HashPartitioner(20000)\n\n    val history = OSMOrc.planetHistory\n    val changesets = OSMOrc.changesets\n\n    val historyNodes =\n      history\n        .select(\"lat\", \"lon\", \"changeset\")\n        .where(\"type = 'node'\")\n\n    val changesetToHashtag =\n      changesets\n        .where($\"tags\".getItem(\"comment\").contains(\"#\"))\n        .withColumn(\"hashtags\", breakOutHashtags($\"tags\"))\n        .where(size($\"hashtags\") > 0)\n        .select($\"id\", explode($\"hashtags\").alias(\"hashtag\"))\n        .map { row =>\n          (row.getAs[Long](\"id\"), row.getAs[String](\"hashtag\"))\n        }\n\n    // Find hashtag -> changeset count\n    // changesetToHashtag.groupBy(\"hashtag\").collect()\n\n    val filteredChangesetToHashtag =\n      changesetToHashtag\n        .rdd\n        .filter { case (_, hashtag) =>\n          TARGET_HASHTAGS.contains(hashtag)\n        }\n        .partitionBy(partitioner)\n\n\n    val changesetToHistoryNodes =\n      historyNodes\n        .map { row =>\n          val lat = row.getAs[java.math.BigDecimal](\"lat\").doubleValue()\n          val lon = row.getAs[java.math.BigDecimal](\"lon\").doubleValue()\n          val changeset = row.getAs[Long](\"changeset\")\n          (changeset, (lon, lat))\n        }\n        .rdd\n        .partitionBy(partitioner)\n\n\n    val pointsByHashtag = \n      filteredChangesetToHashtag\n        .join(changesetToHistoryNodes)\n","user":"anonymous","dateUpdated":"2017-10-22T21:18:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nss: org.apache.spark.sql.SparkSession = org.apache.spark.sql.SparkSession@703ee3c8\n\nimport ss.implicits._\n\nbufferSize: Double = 0.001\n\nHashtagSet: scala.util.matching.Regex = #(\\w+)\n\nbreakOutHashtags: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,ArrayType(StringType,true),Some(List(MapType(StringType,StringType,true))))\n\npartitioner: org.apache.spark.HashPartitioner = org.apache.spark.HashPartitioner@4e20\n\nhistory: org.apache.spark.sql.DataFrame = [id: bigint, type: string ... 11 more fields]\n\nchangesets: org.apache.spark.sql.DataFrame = [id: bigint, tags: map<string,string> ... 11 more fields]\n\nhistoryNodes: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [lat: decimal(9,7), lon: decimal(10,7) ... 1 more field]\n\nchangesetToHashtag: org.apache.spark.sql.Dataset[(Long, String)] = [_1: bigint, _2: string]\n\nfilteredChangesetToHashtag: org.apache.spark.rdd.RDD[(Long, String)] = ShuffledRDD[8] at partitionBy at <console>:95\n\nchangesetToHistoryNodes: org.apache.spark.rdd.RDD[(Long, (Double, Double))] = ShuffledRDD[14] at partitionBy at <console>:90\n\npointsByHashtag: org.apache.spark.rdd.RDD[(Long, (String, (Double, Double)))] = MapPartitionsRDD[17] at join at <console>:97\n"}]},"apps":[],"jobName":"paragraph_1508693844574_-352576898","id":"20171022-173724_2146611887","dateCreated":"2017-10-22T17:37:24+0000","dateStarted":"2017-10-22T17:37:58+0000","dateFinished":"2017-10-22T17:38:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4997"},{"text":"pointsByHashtag.count()","user":"anonymous","dateUpdated":"2017-10-22T17:39:30+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres17: Long = 285445749\n"}]},"apps":[],"jobName":"paragraph_1508693878264_-135917295","id":"20171022-173758_1283610350","dateCreated":"2017-10-22T17:37:58+0000","dateStarted":"2017-10-22T17:39:30+0000","dateFinished":"2017-10-22T18:08:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4998"},{"text":"history.first()","user":"anonymous","dateUpdated":"2017-10-22T18:22:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres18: org.apache.spark.sql.Row = [1,node,Map(),0E-7,0E-7,WrappedArray(),WrappedArray(),9257,2006-05-10 18:27:47.0,1298,τ12,1,false]\n"}]},"apps":[],"jobName":"paragraph_1508693970938_-2074527440","id":"20171022-173930_1876620556","dateCreated":"2017-10-22T17:39:30+0000","dateStarted":"2017-10-22T18:22:07+0000","dateFinished":"2017-10-22T18:22:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4999"},{"text":"res18.getAs[String](\"user\")\n","user":"anonymous","dateUpdated":"2017-10-22T18:24:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nres24: String = τ12\n"}]},"apps":[],"jobName":"paragraph_1508696527312_18164511","id":"20171022-182207_1166462956","dateCreated":"2017-10-22T18:22:07+0000","dateStarted":"2017-10-22T18:24:49+0000","dateFinished":"2017-10-22T18:24:49+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5000"},{"text":"case class ChangesetFootprint(user: String, changeset: Long, numberOfNodes: Int, width: Double, height: Double)","user":"anonymous","dateUpdated":"2017-10-22T18:42:49+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[]},"apps":[],"jobName":"paragraph_1508697767871_-465147459","id":"20171022-184247_531510729","dateCreated":"2017-10-22T18:42:47+0000","dateStarted":"2017-10-22T18:42:49+0000","dateFinished":"2017-10-22T18:42:49+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:5001"},{"text":"\n\n    val history = OSMOrc.planetHistory\n\n    val historyNodes =\n      history\n        .select(\"lat\", \"lon\", \"changeset\", \"user\")\n        .where(\"type = 'node'\")\n\n    val changesetFootprints = \n      historyNodes\n        .map { row =>\n          val lat = row.getAs[java.math.BigDecimal](\"lat\").doubleValue()\n          val lon = row.getAs[java.math.BigDecimal](\"lon\").doubleValue()\n        \n          val key =(row.getAs[String](\"user\"), row.getAs[Long](\"changeset\"))\n          val value = (lon, lat)\n          (key, value)\n        }\n        .rdd\n        .groupByKey()\n        .map { case ((user, changeset), lls) =>\n          val mp = MultiPoint(lls)\n          val changePoint = mp.centroid.as[Point].get\n          val numberOfNodes = mp.points.length\n          val bbox = mp.envelope\n\n          Feature(changePoint, (user, changeset, numberOfNodes, bbox.width, bbox.height))\n        }\n\n    changesetFootprints.count()","user":"anonymous","dateUpdated":"2017-10-22T18:45:26+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nhistory: org.apache.spark.sql.DataFrame = [id: bigint, type: string ... 11 more fields]\n\nhistoryNodes: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [lat: decimal(9,7), lon: decimal(10,7) ... 2 more fields]\n\nchangesetFootprints: org.apache.spark.rdd.RDD[geotrellis.vector.Feature[geotrellis.vector.Point,(String, Long, Int, Double, Double)]] = MapPartitionsRDD[34] at map at <console>:90\n\nres42: Long = 42009956\n"}]},"apps":[],"jobName":"paragraph_1508696608884_1587878726","id":"20171022-182328_109241174","dateCreated":"2017-10-22T18:23:28+0000","dateStarted":"2017-10-22T18:45:26+0000","dateFinished":"2017-10-22T19:24:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5002"},{"text":"import osmesa.analytics.oneoffs._\n//import osmesa.analytics.oneoffs.FootprintByUser._\nval BASE_ZOOM = 13\nval LAYER_NAME = \"user_footprint\"\n\nobject Foo {\n    \n    case class ChangesetFootprint(user: String, changeset: Long, numberOfNodes: Int, width: Double, height: Double)\n\n  def save(zoom: Int, vectorTiles: RDD[((SpatialKey, String), VectorTile)]) = {\n    val s3PathFromKey: ((SpatialKey, String)) => String =\n      { case (sk, name) =>\n        s\"s3://vectortiles/test-vts/peruser/${name}/${zoom}/${sk.col}/${sk.row}.mvt\"\n      }\n    vectorTiles\n      .mapValues(_.toBytes)\n      .saveToS3(s3PathFromKey, putObjectModifier = { o => o.withCannedAcl(PublicRead)})\n  }\n\n  def bakeVectorTiles(\n    rdd: RDD[((SpatialKey, String), Iterable[Feature[Geometry, ChangesetFootprint]])],\n    layout: LayoutDefinition\n  ): RDD[((SpatialKey, String), VectorTile)] =\n    rdd\n      .mapPartitions({ partition =>\n        val mapTransform = layout.mapTransform\n        partition.map { case ((spatialKey, user), pointFeatures) =>\n          val tileExtent = mapTransform(spatialKey)\n          val vtFeatures =\n            pointFeatures.flatMap { pf =>\n              pf.geom match {\n                case p: Point =>\n                  val cf = pf.data\n                  val vtData =\n                    Map(\n                      \"user\" -> VString(cf.user),\n                      \"changeset\" -> VInt64(cf.changeset),\n                      \"numberOfNodes\" -> VInt64(cf.numberOfNodes),\n                      \"width\" -> VDouble(cf.width),\n                      \"height\" -> VDouble(cf.width)\n                    )\n                  Some(Feature(p, vtData))\n                case _ => None\n              }\n            }\n          val layer =\n            StrictLayer(\n                name=LAYER_NAME,\n                tileWidth=4096,\n                version=2,\n                tileExtent=tileExtent,\n                points=vtFeatures.toSeq,\n                multiPoints=Seq[Feature[MultiPoint, Map[String, Value]]](),\n                lines=Seq[Feature[Line, Map[String, Value]]](),\n                multiLines=Seq[Feature[MultiLine, Map[String, Value]]](),\n                polygons=Seq[Feature[Polygon, Map[String, Value]]](),\n                multiPolygons=Seq[Feature[MultiPolygon, Map[String, Value]]]()\n              )\n\n          val vt = VectorTile(Map(LAYER_NAME -> layer), tileExtent)\n\n         ((spatialKey, user), vt)\n        }\n      }, preservesPartitioning = true)\n\n}","user":"anonymous","dateUpdated":"2017-10-22T23:15:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"\nimport osmesa.analytics.oneoffs._\n\nBASE_ZOOM: Int = 13\n\nLAYER_NAME: String = user_footprint\n\ndefined object Foo\n"}]},"apps":[],"jobName":"paragraph_1508702730603_701886779","id":"20171022-200530_1895943195","dateCreated":"2017-10-22T20:05:30+0000","dateStarted":"2017-10-22T23:15:44+0000","dateFinished":"2017-10-22T23:15:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5003"},{"text":" val historyNodes =\n       OSMOrc.planetHistory\n        .select(\"lat\", \"lon\", \"changeset\", \"user\")\n        .where(\"type = 'node'\")\n        .where(\"user = 'piaco_dk'\") // DEBUG\n//        .repartition(1000)\n        //.repartition(10000)","user":"anonymous","dateUpdated":"2017-10-22T22:05:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508709918175_-650328661","id":"20171022-220518_497950951","dateCreated":"2017-10-22T22:05:18+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:5004"},{"text":"    import Foo._\n    \n    val partitioner = new HashPartitioner(1000)    \n\n    val history = OSMOrc.planetHistory\n\n    val historyNodes =\n      history\n        .select(\"lat\", \"lon\", \"changeset\", \"user\")\n        .where(\"type = 'node'\")\n        .where(\"user = 'piaco_dk'\") // DEBUG\n//        .repartition(1000)\n        //.repartition(10000)\n\n    val changesetFootprints =\n      historyNodes\n        .map { row =>\n          val lat = row.getAs[java.math.BigDecimal](\"lat\").doubleValue()\n          val lon = row.getAs[java.math.BigDecimal](\"lon\").doubleValue()\n\n          val key =(row.getAs[String](\"user\"), row.getAs[Long](\"changeset\"))\n          val value = (lon, lat)\n          (key, value)\n        }\n        .rdd\n        .groupByKey(partitioner)\n        .map { case ((user, changeset), lls) =>\n          val mp = MultiPoint(lls).reproject(LatLng, WebMercator)\n          val changePoint = mp.centroid.as[Point].get\n          val numberOfNodes = mp.points.length\n          val bbox = mp.envelope\n\n          Feature(changePoint, osmesa.analytics.oneoffs.ChangesetFootprint(user, changeset, numberOfNodes, bbox.width, bbox.height))\n        }\n\n    val baseLayout = ZoomedLayoutScheme(WebMercator).levelForZoom(BASE_ZOOM).layout\n\n    val keyedChangesetFootprints: RDD[((SpatialKey, String), Iterable[Feature[Geometry, osmesa.analytics.oneoffs.ChangesetFootprint]])] =\n      changesetFootprints\n        .clipToGrid(baseLayout)\n        .map { case (spatialKey, pointFeature) => ((spatialKey, pointFeature.data.user), pointFeature) }\n        .groupByKey(partitioner)\n\n    var rdd: RDD[((SpatialKey, String), Iterable[Feature[Geometry, osmesa.analytics.oneoffs.ChangesetFootprint]])] = keyedChangesetFootprints\n    for(z <- BASE_ZOOM to 1 by -1) {\n      val layout = ZoomedLayoutScheme(WebMercator).levelForZoom(z).layout\n      save(z, osmesa.analytics.oneoffs.FootprintByUser.bakeVectorTiles(rdd, layout))\n      rdd =\n        rdd\n          .map { case ((sk, u), geoms) =>\n            ((SpatialKey(sk.col/2, sk.row/2), u), geoms)\n          }\n          .groupByKey(partitioner)\n          .mapValues(_.flatten)\n    }\n","user":"anonymous","dateUpdated":"2017-10-22T23:15:48+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"msg":[{"data":"","type":"TEXT"}]},"apps":[],"jobName":"paragraph_1508697715949_545141856","id":"20171022-184155_464408868","dateCreated":"2017-10-22T18:41:55+0000","dateStarted":"2017-10-22T23:15:48+0000","dateFinished":"2017-10-22T23:15:41+0000","status":"RUNNING","progressUpdateIntervalMs":500,"$$hashKey":"object:5005","errorMessage":""},{"text":"keyedChangesetFootprints.collect()","user":"anonymous","dateUpdated":"2017-10-22T22:03:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res41: Array[((geotrellis.spark.SpatialKey, String), Iterable[geotrellis.vector.Feature[geotrellis.vector.Geometry,osmesa.analytics.oneoffs.ChangesetFootprint]])] = Array(((SpatialKey(4096,4095),piaco_dk),CompactBuffer(Feature(POINT (23.04335173251446 3.6075607544797705),ChangesetFootprint(piaco_dk,48635459,692,0.014432200000001671,0.0027897999999999534)), Feature(POINT (34.394184840125426 0.0304722062695925),ChangesetFootprint(piaco_dk,43962193,319,0.01616690000000176,0.018466000000000003)), Feature(POINT (16.834656807173914 13.02258531347825),ChangesetFootprint(piaco_dk,40923162,460,0.0014228999999978953,0.0013433999999996615)), Feature(POINT (106.24107502095238 15.906618964761904),ChangesetFootprint(piaco_dk,50867621,105,0.0020039000000053875,0.004027300000000622)), Feature(POINT (36..."}]},"apps":[],"jobName":"paragraph_1508702693338_1832633148","id":"20171022-200453_1701681172","dateCreated":"2017-10-22T20:04:53+0000","dateStarted":"2017-10-22T22:03:06+0000","dateFinished":"2017-10-22T22:03:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:5006"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1508709786300_569893992","id":"20171022-220306_669378536","dateCreated":"2017-10-22T22:03:06+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:5007"}],"name":"Footprint tests","id":"2CVA9H4QN","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}