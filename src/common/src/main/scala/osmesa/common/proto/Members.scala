// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package osmesa.common.proto



@SerialVersionUID(0L)
final case class Members(
    member: _root_.scala.collection.Seq[Members.Member] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Members] with com.trueaccord.lenses.Updatable[Members] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      member.foreach(member => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(member.serializedSize) + member.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      member.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Members = {
      val __member = (_root_.scala.collection.immutable.Vector.newBuilder[Members.Member] ++= this.member)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __member += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, Members.Member.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      Members(
          member = __member.result()
      )
    }
    def clearMember = copy(member = _root_.scala.collection.Seq.empty)
    def addMember(__vs: Members.Member*): Members = addAllMember(__vs)
    def addAllMember(__vs: TraversableOnce[Members.Member]): Members = copy(member = member ++ __vs)
    def withMember(__v: _root_.scala.collection.Seq[Members.Member]): Members = copy(member = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => member
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(member.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = Members
}

object Members extends com.trueaccord.scalapb.GeneratedMessageCompanion[Members] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Members] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Members = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    Members(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Members.Member]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Members] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      Members(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Members.Member]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MembersProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MembersProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = Members.Member
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]](
    _root_.osmesa.common.proto.Members.Member
  )
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = Members(
  )
  @SerialVersionUID(0L)
  final case class Member(
      `type`: String = "",
      ref: Long = 0L,
      role: String = ""
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Member] with com.trueaccord.lenses.Updatable[Member] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (`type` != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, `type`) }
        if (ref != 0L) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, ref) }
        if (role != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, role) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = `type`
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = ref
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
        {
          val __v = role
          if (__v != "") {
            _output__.writeString(3, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Members.Member = {
        var __type = this.`type`
        var __ref = this.ref
        var __role = this.role
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __type = _input__.readString()
            case 16 =>
              __ref = _input__.readInt64()
            case 26 =>
              __role = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        Members.Member(
            `type` = __type,
            ref = __ref,
            role = __role
        )
      }
      def withType(__v: String): Member = copy(`type` = __v)
      def withRef(__v: Long): Member = copy(ref = __v)
      def withRole(__v: String): Member = copy(role = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = `type`
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = ref
            if (__t != 0L) __t else null
          }
          case 3 => {
            val __t = role
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(`type`)
          case 2 => _root_.scalapb.descriptors.PLong(ref)
          case 3 => _root_.scalapb.descriptors.PString(role)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = Members.Member
  }
  
  object Member extends com.trueaccord.scalapb.GeneratedMessageCompanion[Members.Member] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Members.Member] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Members.Member = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      Members.Member(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[Long],
        __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Members.Member] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        Members.Member(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Long]).getOrElse(0L),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Members.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Members.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = Members.Member(
    )
    implicit class MemberLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Members.Member]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Members.Member](_l) {
      def `type`: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def ref: _root_.com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.ref)((c_, f_) => c_.copy(ref = f_))
      def role: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.role)((c_, f_) => c_.copy(role = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
    final val REF_FIELD_NUMBER = 2
    final val ROLE_FIELD_NUMBER = 3
  }
  
  implicit class MembersLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Members]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Members](_l) {
    def member: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Members.Member]] = field(_.member)((c_, f_) => c_.copy(member = f_))
  }
  final val MEMBER_FIELD_NUMBER = 1
}
