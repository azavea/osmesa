// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package osmesa.common.proto


@SerialVersionUID(0L)
final case class Hashtags(
    hashtags: _root_.scala.collection.Seq[Hashtags.Hashtag] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Hashtags] with com.trueaccord.lenses.Updatable[Hashtags] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      hashtags.foreach(hashtags => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(hashtags.serializedSize) + hashtags.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      hashtags.foreach { __v =>
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Hashtags = {
      val __hashtags = (_root_.scala.collection.immutable.Vector.newBuilder[Hashtags.Hashtag] ++= this.hashtags)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __hashtags += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, Hashtags.Hashtag.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      Hashtags(
          hashtags = __hashtags.result()
      )
    }
    def clearHashtags = copy(hashtags = _root_.scala.collection.Seq.empty)
    def addHashtags(__vs: Hashtags.Hashtag*): Hashtags = addAllHashtags(__vs)
    def addAllHashtags(__vs: TraversableOnce[Hashtags.Hashtag]): Hashtags = copy(hashtags = hashtags ++ __vs)
    def withHashtags(__v: _root_.scala.collection.Seq[Hashtags.Hashtag]): Hashtags = copy(hashtags = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => hashtags
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(hashtags.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = Hashtags
}

object Hashtags extends com.trueaccord.scalapb.GeneratedMessageCompanion[Hashtags] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Hashtags] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Hashtags = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    Hashtags(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[Hashtags.Hashtag]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[Hashtags] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      Hashtags(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[Hashtags.Hashtag]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = HashtagsProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = HashtagsProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = Hashtags.Hashtag
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]](
    Hashtags.Hashtag
  )
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = Hashtags(
  )
  @SerialVersionUID(0L)
  final case class Hashtag(
      tag: String = "",
      count: Int = 0
      ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Hashtag] with com.trueaccord.lenses.Updatable[Hashtag] {
      @transient
      private[this] var __serializedSizeCachedValue: Int = 0
      private[this] def __computeSerializedValue(): Int = {
        var __size = 0
        if (tag != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, tag) }
        if (count != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, count) }
        __size
      }
      final override def serializedSize: Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
        {
          val __v = tag
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = count
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): Hashtags.Hashtag = {
        var __tag = this.tag
        var __count = this.count
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __tag = _input__.readString()
            case 16 =>
              __count = _input__.readInt32()
            case tag => _input__.skipField(tag)
          }
        }
        Hashtags.Hashtag(
            tag = __tag,
            count = __count
        )
      }
      def withTag(__v: String): Hashtag = copy(tag = __v)
      def withCount(__v: Int): Hashtag = copy(count = __v)
      def getFieldByNumber(__fieldNumber: Int): scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = tag
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = count
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(tag)
          case 2 => _root_.scalapb.descriptors.PInt(count)
        }
      }
      override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
      def companion = Hashtags.Hashtag
  }
  
  object Hashtag extends com.trueaccord.scalapb.GeneratedMessageCompanion[Hashtags.Hashtag] {
    implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[Hashtags.Hashtag] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): Hashtags.Hashtag = {
      require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      Hashtags.Hashtag(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
        __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[Hashtags.Hashtag] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        Hashtags.Hashtag(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = Hashtags.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = Hashtags.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = Hashtags.Hashtag(
    )
    implicit class HashtagLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Hashtags.Hashtag]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Hashtags.Hashtag](_l) {
      def tag: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.tag)((c_, f_) => c_.copy(tag = f_))
      def count: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.count)((c_, f_) => c_.copy(count = f_))
    }
    final val TAG_FIELD_NUMBER = 1
    final val COUNT_FIELD_NUMBER = 2
  }
  
  implicit class HashtagsLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, Hashtags]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, Hashtags](_l) {
    def hashtags: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[Hashtags.Hashtag]] = field(_.hashtags)((c_, f_) => c_.copy(hashtags = f_))
  }
  final val HASHTAGS_FIELD_NUMBER = 1
}
